You can carry out DRAGONET for generating molecules from disease-specific gene expression profiles.

We will give the explanation in the following order.

1. Overview of this code
2. Explanation of each file
3. Implementation Procedures
4. Caution

============================================================
1. Overview of this code

The generation of molecules in this code is divided into 2 steps.

(1) Selection of disease reversal molecules

Calculate correlation coefficients between disease reversal profiles (DRPs) and chemically induced profiles (CIPs).
Molecules with the top 3 correlation coefficients are selected as disease reversal molecules for each disease.

------------------------------------------------------------
(2) Generation of new molecules from disease reversal molecules as starting points using TransVAE

The disease reversal molecules are translated into the latent space coordinates of TransVAE.
Then, new-molecule coordinates are determined by changing the disease-reversal-molecule coordinates linearly and continuously.
Finally, the new molecules are generated by decoding these coordinates.


============================================================
2. Explanation of each file

There are four major files in this file.

・env

myenv.yml in env is used to build a virtual environment.
If you cannot, install the libraries listed in requirements.txt.

------------------------------------------------------------
・code

In code, you will find
(1) generator
(2) select_disease_reversal_molecule
(3) TransVAE

Each code contains the following:
(1) for generating new molecules
(2) for selecting the disease reversal molecules


Also, (3) TransVAE uses the TransVAE code from Dollar et al. (2021).
The TransVAE code is available at 

https://github.com/oriondollar/TransVAE

------------------------------------------------------------
・data

There are 6 files in data.

(1) char_dict

This stores the numbers corresponding to SMILES and the weights for each SMILES when converting a SMILES string to a numeric string.
The numbers corresponding to the SMILES are stored in "smiles_char_dict.pkl", and the weights in each SMILES are stored in "smiles_char_weight.npy".

(2) checkpoints

best_smiles_21121217.ckpt in checkpoints contains values for TransVAE hyperparameters, etc.

(3) correlation_output

The file contains disease reversal molecules' SMILES strings and their correlation coefficients, divided into txt files for each disease.

(4) disease_reversal_profile

The file contains DRPs.
disease_reversal_profile.csv was constructed by multiplying all elements in disease-specific gene expression profiles obtained from CREEDS by −1,
and extracting the proteins in common with CIPs.

(5) registered_drug

The file contains registered drugs for gastric cancer, atopic dermatitis, and Alzheimer's disease, which were applied in this paper.
The registered drugs are collected from KEGG DRUG, and stored as sdf files.
The drugs are used to calculate the Tanimoto coefficient in results/structural_similarity.ipynb.

(6) L1000_data

The file contains CIPs to be used when selecting disease reversal molecule.
L1000_data.csv were obtained from LINCS. We removed molecules in LINCS dataset met the following criteria: 

1. molecular weight is 500 or more
2. the number of ring structures is 4 or more
3. the number of chiral centers is 3 or more

Additionally, We took 884 genes that were common to genes in DRPs. 

------------------------------------------------------------
・results

Gastric cancer, atopic dermatitis, and Alzheimer's disease were applied as case studies in this paper.

newly_generated_molecules contains the results of newly generated molecules for each disease.

structural_similarity.ipynb demonstrates that the Tanimoto coefficients between the newly generated molecules and the registered drugs are higher 
compared with those between the 1st disease reversal molecules and the registered drugs for all case study diseases.


============================================================
3. Implementation Procedures

This section describes the implementation procedures.

(1) Building a virtual environment

Execute the following command on the terminal.

cd ./env
conda env create -n dragonet -f DRAGONET.yml
conda activate dragonet


If this is not possible, install the libraries listed in "requirements.txt".

------------------------------------------------------------
(2) Selection of disease reversal molecules

Calculate the correlation coefficients between the CIPs and DRPs for each molecule, and 
The molecules with the top 3 correlation coefficients are selected as the disease reversal molecules.

Execute the following command on the terminal.

cd ./code/select_disease_reversal_molecule
python calc_correlation.py --profile ../../data/disease_reversal_profile/disease_reversal_profile.csv"


The txt files in data/correlation_output store the disease reversal molecules for each disease, and corresponding correlation coefficients.

------------------------------------------------------------
(3) New molecule generation

You can generate new molecules from disease reversal molecules using TransVAE.

Execute the following command on the terminal.

cd ./code/generator
python smiles_generator.py --path ../../data/correlation_output/{disease_name}.txt

Enter the disease name, for which you want to generate molecules, in the {disease_name} of the command.
The new-molecule coordinates are determined in lines 96 ~ 99 of smiles_generator.py.

In addition, to prevent generating many invalid SMILES strings, the variable "none_count" on lines 149 is used.
The variable is to be redone if more than 10 / 51 generated SMILES strings are invalid.


============================================================
4. Caution

・The newly generated molecules in this paper correspond to "1_time" file in Gastric cancer, "3_time" file in Atopic dermatitis and "4_time" file in Alzheimer's disease.


・When entering {disease_name} in the command for the diseases used in the paper, enter "Gastric\ cancer", "Atopic\ dermatitis", "Alzheimer\'s\ disease", respectively.


・Molecule generation is set to occur 5 times for each disease. This will result in a file being generated for each frequency (1_time, 2_time, ..., 5_time).
If you change the number of generation times, change the number in line 192 of code/generator/smiles_generator.py
　
count_generated_molecules == 5


・TransVAE is released under the MIT License. 

Copyright (c) 2020 Orion Dollar
Released under the MIT license
https://github.com/oriondollar/TransVAE/blob/master/LICENSE

The TransVAE license is stored in code/TransVAE/LICENSE.





